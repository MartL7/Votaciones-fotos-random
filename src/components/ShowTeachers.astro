---
import { teachers } from '@/logic/teachers'

interface Props {
  classImage: string
  classTitle?: string
  classReference ?: string
  votes ?: string[]
}

const { classImage, classTitle, classReference, votes } = Astro.props
---

<article class="mt-10 md:mt-20 flex flex-col justify-center items-center">
  <h2 class="text-2xl font-bold"> <span class="text-2xl font-Dancing text-blue-400/90"> Categoria: </span> Profesor del Ciclo </h2>
  <p class="text-red-400/90 text-center text-xl mb-5 md:mb-10"> Escoge a tu profesor favorito </br>
   {votes ? 'Solo puedes votar 2 veces' : 'en esta categor√≠a' }
  </p>
  <section class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-x-10 mb-10 md:mb-20">
    {
      teachers.map(({ id, imagePresentation, name, category }) => (
        <div 
        class:list={[
          `${classReference} relative flex flex-col justify-center items-center h-[400px]`,
          { 'is-voted': votes?.includes(id) }
        ]} 
        data-category={category} 
        data-vote-id={id}>
          <picture class="size-full flex justify-center items-center">
            <img 
              class:list={[
                `masked-image object-cover size-full ${classImage}`,
                { 'saturate-150': votes?.includes(id)}
              ]}
              loading="lazy"
              decoding="async"
              src={imagePresentation} 
              alt={`Imagen de ${name}`}
            />
          </picture>
          <span class={`font-Dancing font-bold skew-y-[-21deg] pointer-events-none text-center absolute bottom-0 z-50 mx-auto text-5xl lg:text-6xl`}>
            <span class='text'>{classTitle} </span> <br/>
            {name}
          </span>
        </div>
      ))
    }
  </section>
</article>

<style>
  .text {
    opacity: 0;
    transition: opacity 0.3s;
  }

  .text-vote:hover .text {
    opacity: 1;
  }
  .is-voted .text {
    opacity: 1;
  }

  .masked-image {
    -webkit-mask-image: linear-gradient(to left, black 95%, transparent),
                        linear-gradient(to right, black 95%, transparent),
                        linear-gradient(to top, black 95%, transparent),
                        linear-gradient(black 50%, transparent);

    mask-image: linear-gradient(to left, black 95%, transparent),
                linear-gradient(to right, black 95%, transparent),
                linear-gradient(to top, black 95%, transparent),
                linear-gradient(black 50%, transparent);

    -webkit-mask-composite: destination-in;
    mask-composite: intersect;
  }
</style>