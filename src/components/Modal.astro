---
interface Props {
	isButton: boolean
	className: string
	id: string
}

const { isButton, className, id } = Astro.props
---
<dialog
	class=`${className} items-center justify-center bg-transparent px-4 text-2xl text-white sm:px-0"
	id="dialog-image`
>
	<div class="relative block w-auto sm:w-[50dvh] max-w-[50dvh] bg-transparent">
		<section class="flex justify-center items-center gap-5 size-full">
			<slot />
		</section>

		{
			isButton ? (
			<button
					type="button"
					class="close-dialog border fixed right-8 top-8 rounded bg-black/60 p-4 transition hover:scale-110 hover:bg-blue-500/30 hover:border-blue-950"
					id={id}
				>
					<svg
						class="size-5 hover:text-red-400/90"
						aria-hidden="true"
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 14 14"
					>
						<path
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
					</svg>
				</button>
			) : ''
		}
	</div>
</dialog>

<style>
	.menu-dialog[open]::backdrop {
		animation-name: slide-down;
		animation-duration: 200ms;
		animation-fill-mode: forwards;
		background: radial-gradient(ellipse at 50% -20%, rgba(120, 119, 198, 0.3), rgba(255, 255, 255, 0));
		animation-timing-function: ease-in-out;
		backdrop-filter: blur(50px);
	}

	.clip-dialog[open]::backdrop {
		background-color: rgba(0, 0, 0, 0.5);
		animation-name: join-anim;
		animation-duration: 200ms;
		animation-fill-mode: forwards;
		animation-timing-function: ease-in-out;
	}

	@keyframes join-anim {
		from {
			background-color: rgba(0, 0, 0, 0);
		}
		to {
			background-color: rgba(0, 0, 0, 0.7);
		}
	}
</style>