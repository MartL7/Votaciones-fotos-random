---
import Smale_emotes from '@/components/icons/smale.astro'
import { stickers } from '@/logic/stickers'
import type { Session } from '@auth/core/types'

interface Props {
    sessionUser: Session
    userComment: string
}

const { sessionUser, userComment } = Astro.props

const { image, name } = sessionUser?.user

const imageDefault = image ?? '/img/User-session.webp'
const nameDefault = name ?? 'Usuario'
---
<div class="Comments flex flex-col mt-10 sm:mt-0 sm:flex-row justify-center items-center size-full">
    <div class="size-10">
        <img  
            decoding="async"
            loading="lazy"
            src={imageDefault} 
            alt={`Imagen del usuario ${nameDefault}`} 
            class="size-full rounded-full"  
        />
    </div>
    <form id="formComment" data-user-comment={userComment} data-session={JSON.stringify(sessionUser)}>
        <textarea placeholder="Comentario..."></textarea>
        <div class="options_Comment flex justify-between w-full px-[10px]">
            <div class="emotes">
                <Smale_emotes />
                <div class="content_emotes">
                    <article class="flex flex-wrap gap-2 ps-15 overflow-auto justify-center">
                        {
                            stickers.map(({ imageUrl, code }) => (
                            <button type="button" class="buttons-stickers" data-code={code}>
                                <img 
                                    decoding="async"
                                    loading="lazy"
                                    src={imageUrl} 
                                    alt={`Sticker ${code}`} 
                                    class="size-auto" 
                                />
                            </button>
                            ))
                        }
                    </article>
                </div>
            </div>
            <button type="submit" class="p-2 bg-slate-200/20 rounded-lg"> Enviar </button>
        </div>
    </form> 
</div>


<style>
    .image_user img{
        height: 40px;
        width: 40px;
    }
    .Comments > form {
        width: 85%;
    }

    .Comments textarea {
        width: 100%;
        padding: 10px 0px;
        background-color: transparent;
        border: none;
        border-bottom: 1px solid white;
        margin: 10px;
        box-sizing: border-box;
        display: block;
        resize: none;
        field-sizing: content;
    }

    .Comments textarea:focus {
        outline: none;
    }
    .emotes {
        background-color: rgba(255, 255, 255, 0.522);
        height: 30px;
        width: 30px;
        border-radius: 50%;
        cursor: pointer;
    }

    .emotes svg {
        height: 100%;
        width: 100%;
    }

    .content_emotes {
        background-color: rgb(46, 46, 46);
        width: 200px;
        height: 350px;
        border-radius: 15px;
        position: relative;
        top: -400px;
        left: -30px;
        display: none;
    }

    .content_emotes::before {
        content: '';
        position: absolute;
        bottom: -30px;
        left: 23%;
        transform: translateX(-50%);
        border-width: 15px;
        border-style: solid;
        border-color: rgb(46, 46, 46) transparent transparent transparent;
    }
</style>

<script>
    import { $, $$ } from '@/lib/dom-selector'
    import { toastAlert } from '@/function/alerts'

    document.addEventListener('astro:page-load', () => {
        const $buttonShowStickers = $('.emotes') as HTMLButtonElement
        const $containerStickers = $('.content_emotes') as HTMLElement
        const $formComment = $('#formComment') as HTMLFormElement
        const $buttonsStickers = $$('.buttons-stickers') as NodeListOf<HTMLButtonElement>

        
        const { userComment, session } = $formComment.dataset

        $buttonsStickers.forEach(($button) => {
            $button.addEventListener('click', async () => {
                const { code } = $button.dataset

                const dataToSend = {
                    userComment,
                    codeGif: code
                }

                if (session == null) {
                    toastAlert(
                    { title: 'Debes iniciar sesiÃ³n para enviar stickers ðŸ˜¢', 
                        type: 'error', 
                        icon: true, 
                        dismissible: false, 
                        location: 'bottom-center' 
                    }
                    )
                    return
                }

                const response = await fetch('/api/comments/comments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(dataToSend)
                })

                if (response.ok) {
                    toastAlert(
                    { title: 'Sticker enviado ðŸ’š', 
                        type: 'success', 
                        icon: true, 
                        dismissible: false, 
                        location: 'bottom-center' 
                    }
                    )
                }
                else {
                    toastAlert(
                    { title: 'Error al enviar el Sticker ðŸ˜¢', 
                        type: 'error', 
                        icon: true, 
                        dismissible: false, 
                        location: 'bottom-center' 
                    }
                    )
                }
            })
        })


        $formComment.addEventListener('submit', async (event) => {
            event.preventDefault()
            const $textarea = $formComment.querySelector('textarea') as HTMLTextAreaElement
            const comment = $textarea.value

            const dataToSend = {
                userComment,
                comment
            }

            if (session == null) {
                toastAlert(
                    { title: 'Debes iniciar sesiÃ³n para enviar Comentarios ðŸ˜¢', 
                    type: 'error', 
                    icon: true, 
                    dismissible: false, 
                    location: 'bottom-center' 
                    }
                )
                return
            }

            const response = await fetch('/api/comments/comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(dataToSend)
            })

            if (response.ok) {
                toastAlert(
                { title: 'Comentario enviado ðŸ’š', 
                    type: 'success', 
                    icon: true, 
                    dismissible: false, 
                    location: 'bottom-center' 
                }
                )
            }
            else {
                toastAlert(
                { title: 'Error al enviar el comentario ðŸ˜¢', 
                    type: 'error', 
                    icon: true, 
                    dismissible: false, 
                    location: 'bottom-center' 
                }
                )
            }
        })

        $buttonShowStickers.addEventListener('click', () => {
            $containerStickers.style.display = $containerStickers.style.display === 'block' ? 'none' : 'block'
        })
    })
</script>