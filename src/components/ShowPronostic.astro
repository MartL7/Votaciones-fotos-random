---
interface Props {
  arrayPronostic: { VoteId: string, CategoryId: string, count: number }[]
  totalVotes: number
}

const { arrayPronostic, totalVotes } = Astro.props
---

<div class="mt-5 md:mt-10 flex justify-center w-full items-center flex-col">
    <div class="container-pronostic gap-10 md:gap-20 mb-10 px-5 md:px-0">
      {
        arrayPronostic.map(({ VoteId, count, CategoryId }) => {
          const porcentageCount = (count / totalVotes) * 100
          const teacher = VoteId.split('-').at(1)
          const isMeme = CategoryId.includes('category-memes')
          const imageSrc = isMeme ? `/img/Memes/${VoteId}.webp` : `/img/Profes/${teacher}/${teacher}-image-presentation.webp`

          return (
            <div class={isMeme ? 'col-span-2 flex flex-col gap-2 items-center md:size-[300px] sm:size-[250px]': 'col-span-2 relative flex flex-col items-center md:h-[500px] container-image'}>
              <img 
                loading="lazy"
                decoding="async"
                src={imageSrc}
                alt={`Imagen ${VoteId}`} 
                class={isMeme ? 'size-40 sm:size-full rounded-lg' : 'object-cover size-full hover:scale-110 hover:saturate-150 cursor-pointer transition' } 
                style={!isMeme ? 'mask-image: linear-gradient(black 40%, transparent);' : ''}
              />
              <span class={!isMeme ? `font-Dancing font-bold skew-y-[-21deg] pointer-events-none text-center absolute bottom-20 z-50 mx-auto text-4xl sm:text-5xl lg:text-6xl text-blue-200/90` : 'hidden'}>
                {teacher}
              </span>
              
              <p class="text-3xl md:text-5xl font-semibold text-center text-accent">       
                {porcentageCount.toFixed(2)} %
              </p>

            </div>
          )
        })
      }
    </div>
</div>

<style>
  .container-pronostic {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }

  .container-image:hover p {
    transform: scale(0.9);
  }
</style>
