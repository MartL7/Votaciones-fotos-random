---
import Modal from '@/components/Modal.astro'
import Layout from "@/layouts/Layout.astro"
import Socials from "@/components/Socials.astro"
import ArrowRight from "@/components/icons/Arrows/ArrowRight.astro"
import ArrowLeft from "@/components/icons/Arrows/ArrowLeft.astro"
import InfoCharacterDesk from "@/components/InfoCharacterDesk.astro"
import Like from '@/components/icons/Reactions/Like.astro'
import Dislike from '@/components/icons/Reactions/Dislike.astro'
import Heart from '@/components/icons/Reactions/Heart.astro'
import { Characters } from "@/logic/character"
import { socialIcons } from '@/logic/socials'

const { id } = Astro.params

const character = Characters.find((character) => character.id === id)

if (!character) {
  location.href = '/'
}

const { imagePresentation, name, birthDay, imagesGalery, funnyText, socials } = character


const arrayText = funnyText.join('. ')

const firstThirdsFunnyText = funnyText.slice(0, 3)

const birthDayText = birthDay ?? '1/01/2007'

const formatDate = birthDayText.split('/').toReversed().join('-')

const formatBirthDate = new Date(formatDate)
const today = new Date()

let age = today.getFullYear() - formatBirthDate.getFullYear()
const month = today.getMonth() - formatBirthDate.getMonth()

if (month < 0 || (month === 0 && today.getDate() < formatBirthDate.getDate())) {
  age--
}
---
<Layout title={`Información del personaje ${name}`}>

  <main class="flex justify-center flex-col items-center">

    <h1 class="text-2xl sm:text-3xl font-bold text-gray-400/90 uppercase"> Información de {name} </h1>
    <small class="text-red-300/90 mb-5"> Da click a la imagen para ir atrás </small>

    <input type="hidden" name="arrayToText" value={arrayText} id="arrayToText">

    <section class="hidden md:grid grid-cols-4 gap-10">  
      <article class="row-start-1 row-end-3 flex flex-col gap-y-10 justify-center items-center">
        {
          firstThirdsFunnyText.map((text) => (
            <div class="flex justify-center items-center">
              <p class="font-merri text-pretty text-center text-orange-200/90 font-semibold text-2xl  skew-y-[-8deg]"> "{text}" </p>
            </div>
          ))
        }
      </article>

      <div class="col-start-1 col-end-2 row-start-3 row-end-4 flex justify-center items-center gap-2">
        <button id="like-button" class="group relative cursor-pointer hover:scale-105 hover:text-blue-500 transition">
          <Like class="size-10"/>
        </button>
        <button id="dislike-button" class="group relative cursor-pointer hover:scale-105 hover:text-blue-500 transition">
          <Dislike class="size-10"/>
        </button>
        <button id="heart-button" class="group relative cursor-pointer hover:scale-105 hover:text-red-500 transition">
          <Heart class="size-10"/>
        </button>
      </div>

      <div class="col-start-2 col-end-4 row-start-1 row-end-4 flex justify-center items-center">
        <a href="/" class="group relative cursor-pointer">
          <img 
            decoding="async"
            src={imagePresentation}
            alt={`Imagen Grande de ${name}`}
            transition:name={`Character-Yahir`}
            class="masked-image sm:h-[70vh] transition"
          />
    
          <div>
            <span class=`font-Dancing font-bold skew-y-[-21deg] pointer-events-none text-center absolute bottom-48 md:bottom-28 lg:bottom-48 left-0 right-0 z-50 mx-auto text-6xl lg:text-6xl`>
              {name}
            </span>
    
            <span class=`font-bold skew-y-[-10deg] pointer-events-none text-center absolute bottom-0 left-0 right-0 z-50 mx-auto`>
              <p class="text-blue-400/80 uppercase text-2xl" id="funnyText"> 
                "{funnyText.at(0)}"
              </p>
            </span>
          </div>
        </a>
      </div>

      <InfoCharacterDesk name={name} birthDayText={birthDayText} isMobile={false} age={age} />
    </section>

    <a href="/" class="md:hidden group relative cursor-pointer">
      <img 
        src={imagePresentation}
        alt={`Imagen Grande de ${name}`}
        transition:name={`Character-Yahir`}
        class="masked-image sm:h-[60vh] transition"
      />

      <div>
        <span class=`font-Dancing font-bold skew-y-[-21deg] pointer-events-none text-center absolute bottom-48 md:bottom-28 lg:bottom-48 left-0 right-0 z-50 mx-auto text-6xl lg:text-6xl`>
          {name}
        </span>

        <span class=`font-bold skew-y-[-10deg] pointer-events-none text-center absolute bottom-0 left-0 right-0 z-50 mx-auto`>
          <p class="text-blue-400/80 uppercase text-2xl" id="funnyText2"> 
            "{funnyText.at(0)}"
          </p>
        </span>
      </div>
    </a>

    <aside class="mt-10 flex gap-5 justify-center items-center mb-10 md:mb-0">
      <button id="button-left-change-text"> 
        <span class="text-3xl"> 
          <ArrowLeft class="size-12"/>
        </span>
      </button>
      <span id="text-counter" class="text-3xl">
      </span>
      <button id="button-change-text"> 
        <span class="text-3xl"> 
          <ArrowRight class="size-10"/>
        </span>
      </button>
    </aside>

    <InfoCharacterDesk name={name} birthDayText={birthDayText} isMobile={true} age={age} />

    <h2 class="mt-20 font-semibold text-2xl sm:text-3xl "> Galeria de Fotos de {name} </h2>
    <small class="text-slate-300/90"> Has click a cualquier imagen para su vista en grande </small>
    <section class="grid grid-cols-2 gap-5 sm:gap-8 md:gap-10 sm:grid-cols-3 p-5">
      {
        imagesGalery.map((imageObj, index) => (
          <picture class={`image-container ${imageObj.class}`} data-url={imageObj.image}>
              <img 
              decoding="async"
              loading="lazy"
              src={imageObj.image} 
              alt={`Imagen ${index + 1} de ${name}`}
              class={`size-full rounded-lg object-cover cursor-zoom-in`}
            />
          </picture>
        ))
      }
    </section>

    <section class="mt-10">
      <h3 class="uppercase text-3xl text-center font-bold mb-8"> Redes Sociales </h3>
      <div class="mx-auto flex max-w-[600px] flex-wrap justify-center gap-2 lg:max-w-full">
        {
          socials 
          ? socials?.map((social) => {
            const IconComponent = socialIcons[social.type]

            if (!IconComponent) return

            return (
              <Socials href={social.link}>
                <IconComponent class="size-10 sm:size-12"/>
              </Socials>
            )
          })
          : <p class="text-center text-gray-400/90"> No hay redes sociales disponibles </p>
        }
      </div>
    </section>
    <Modal className="clip-dialog" id="close-dialog" isButton={true}>
      <img decoding="async" loading="lazy" src='' alt="" id="image-clip" class="rounded-lg size-full">
    </Modal>
  </main>
</Layout>

<style>
  .masked-image {
    mask-image: linear-gradient(black 50%, transparent);
  }
</style>

<script>
  import { $, $$ } from '@/lib/dom-selector'
  import { showModal } from '@/const/showModal'

  document.addEventListener('astro:page-load', () => {

    const $gridImages = $$('.image-container')
    
    const changeText = () => {
      const $funnyText = $('#funnyText') as HTMLParagraphElement
      const $funnyText2 = $('#funnyText2') as HTMLParagraphElement
      const $buttonChangeText = $('#button-change-text') as HTMLButtonElement
      const $buttonLeftChangeText = $('#button-left-change-text') as HTMLButtonElement
      const $arrayToText = $('#arrayToText') as HTMLInputElement
      const $textCounter = $('#text-counter') as HTMLSpanElement
  
      if (!$funnyText || !$buttonChangeText || !$buttonLeftChangeText || !$arrayToText || !$textCounter) return
      
      let index = 0
      const arrayText = $arrayToText?.value.split('. ')
  
      $textCounter.textContent = `${index + 1}/${arrayText?.length}`
  
      $buttonLeftChangeText.addEventListener('click', () => {
        index = (index - 1 + arrayText.length) % arrayText.length
        $funnyText.textContent = `"${arrayText[index]}"`
        $funnyText2.textContent = `"${arrayText[index]}"`
        $textCounter.textContent = `${index + 1}/${arrayText.length}`
      })
  
      $buttonChangeText.addEventListener('click', () => {
        index = (index + 1) % arrayText.length
        $funnyText.textContent = `"${arrayText[index]}"`
        $funnyText2.textContent = `"${arrayText[index]}"`
        $textCounter.textContent = `${index + 1}/${arrayText.length}`
      })
    }

    const onScroll = () => {
      $gridImages.forEach(($image) => {
        const rect = $image.getBoundingClientRect()
        if (rect.top < window.innerHeight && rect.bottom >= 0) {
          $image.classList.add('animate-zoom-in')
        } 
      })
    }

  window.addEventListener('scroll', onScroll)
  onScroll()
  changeText()
  showModal()
})
</script>