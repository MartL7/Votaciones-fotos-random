---
import { getSession } from 'auth-astro/server'
import Modal from '@/components/Modal.astro'
import Layout from "@/layouts/Layout.astro"
import Socials from "@/components/Socials.astro"
import ArrowRight from "@/components/icons/Arrows/ArrowRight.astro"
import ArrowLeft from "@/components/icons/Arrows/ArrowLeft.astro"
import InfoCharacterDesk from "@/components/InfoCharacterDesk.astro"
import ReactionsComponent from '@/components/ReactionsComponent.astro'
import ShowComments from '@/components/ShowComments.astro'
import  Comments from '@/components/Comments.astro'
import ShowGroupFriends from '@/components/ShowGroupFriends.astro'
import { memories_1 } from '@/logic/memories'
import { colorsText } from '@/logic/colorsText'
import { Characters } from "@/logic/character"
import { socialIcons } from '@/logic/socials'
import { Reactions, db, eq, count } from 'astro:db'
import { Comments as TableComments } from 'astro:db'
import { and } from 'astro:db'

const { id } = Astro.params

const character = Characters.find((character) => character.id === id)

if (!character) {
  return Astro.redirect('/404')
}

let isZurd = false

const allMembers = memories_1.map((memory) => {
  return memory.members
})

const groupForCharacter = allMembers.filter((member) => {
  return member.find((m) => m.name === id)
})

if (groupForCharacter?.at(0)?.length > 5) isZurd = true
else isZurd = false

const { imagePresentation, name, birthDay, imagesGalery, funnyText, socials, genre } = character

let colorText = ''

const finded = colorsText.filter(c => {
  if (c.id === id) colorText = `text-${c.color}-300/90 shadow-text-${c.color}`
  return c.id === id
})

if (!finded.length) colorText = genre === 'Hombre' ? 'text-blue-300/90 shadow-text-blue' : 'text-purple-400/90 shadow-text-purple'

const arrayText = funnyText.join('. ')

const firstThirdsFunnyText = funnyText.slice(0, 3)

const birthDayText = birthDay ?? '1/01/2007'

const formatDate = birthDayText.split('/').toReversed().join('-')

const formatBirthDate = new Date(formatDate)
const today = new Date()

let age = today.getFullYear() - formatBirthDate.getFullYear()
const month = today.getMonth() - formatBirthDate.getMonth()

if (month < 0 || (month === 0 && today.getDate() < formatBirthDate.getDate())) {
  age--
}

const session = await getSession(Astro.request)

const reactionsForUser = await db
  .select({ reactionUser: Reactions.reaction, userReactionsUser: Reactions.userReaction })
  .from(Reactions)
  .where(and(eq(Reactions.userReaction, name), eq(Reactions.userId, session?.user.id)))

const allReactions = await db
  .select({ reactions: Reactions.reaction, count: count() })
  .from(Reactions)
  .where(eq(Reactions.userReaction, name))
  .groupBy(Reactions.reaction)

const allComments = await db
  .select()
  .from(TableComments)
  .where(eq(TableComments.userComment, name))

const countLikes = allReactions.find((reaction) => reaction.reactions === 'like')?.count ?? 0
const countStars = allReactions.find((reaction) => reaction.reactions === 'star')?.count ?? 0
const countDislikes = allReactions.find((reaction) => reaction.reactions === 'dislike')?.count ?? 0
const countHearts = allReactions.find((reaction) => reaction.reactions === 'heart')?.count ?? 0

const reaction = reactionsForUser.at(0)?.reactionUser ?? ''
---
<Layout title={`${genre === 'Hombre' ? 'Perfil del compa침ero' : 'Perfil de la compa침era'} ${name}`}>

  <article class="fixed top-0 left-0 flex gap-5">
   <button id={`${session == null ? 'login' : 'logout'}`}>
      <img
        decoding="async"
        src={session ? session.user.image : '/logos/Not-user.webp'} 
        alt=`Imagen del usuario ${session?.user.name}` 
        class="md:size-14 size-10 rounded-full"
        data-birthday={birthDayText}
        data-name={name}
        id="session-image"
      />
   </button>
  </article>

  <main class="flex justify-center flex-col items-center">

    <h1 class="text-2xl sm:text-3xl font-bold text-gray-400/90 uppercase"> Informaci칩n de {name} </h1>
    <small class="text-red-300/90 mb-5"> Da click a la imagen para ir atr치s </small>

    <input type="hidden" name="arrayToText" value={arrayText} id="arrayToText">

    <section class="hidden md:grid grid-cols-4 gap-10">  
      <article class=`${isZurd ? 'row-start-1 row-end-2' : 'row-start-1 row-end-3 col-start-1 col-end-2'} flex flex-col gap-y-10 justify-center items-center`>
        {
          firstThirdsFunnyText.map((text) => (
            <div class="flex justify-center items-center">
              <p class="font-merri text-pretty text-center text-orange-200/90 font-semibold text-2xl  skew-y-[-8deg]"> "{text}" </p>
            </div>
          ))
        }
      </article>

      <ReactionsComponent 
        isMobile={false}
        isZurd={isZurd}
        name={name} 
        reaction={reaction} 
        countLikes={countLikes}
        countStars={countStars}
        countHearts={countHearts}
        countDislikes={countDislikes}
        session={session}
      />

      <div class="col-start-2 col-end-4 row-start-1 row-end-4 flex justify-center items-center">
        <a href="/" class="group relative cursor-pointer">
          <img 
            decoding="async"
            src={imagePresentation}
            alt={`Imagen Grande de ${name}`}
            transition:name={`Character-Yahir`}
            class="masked-image sm:h-[70dvh] transition duration-300"
          />
    
          <div>
            <span class=`font-Dancing font-bold skew-y-[-21deg] pointer-events-none text-center absolute bottom-48 md:bottom-28 lg:bottom-48 left-0 right-0 z-50 mx-auto text-6xl lg:text-6xl ${colorText}`>
              {name}
            </span>
    
            <span class=`font-bold skew-y-[-10deg] pointer-events-none text-center absolute bottom-0 left-0 right-0 z-50 mx-auto`>
              <p class="text-blue-400/80 uppercase text-2xl" id="funnyText"> 
                "{funnyText.at(0)}"
              </p>
            </span>
          </div>
        </a>
      </div>

      <InfoCharacterDesk name={name} birthDayText={birthDayText} isMobile={false} age={age} />

      <ShowGroupFriends id={id} groupForCharacter={groupForCharacter} isMobile={false} isZurd={isZurd}/>
    </section>

    <a href="/" class="md:hidden group relative cursor-pointer">
      <img 
        src={imagePresentation}
        alt={`Imagen Grande de ${name}`}
        transition:name={`Character-Yahir`}
        class="masked-image sm:h-[60dvh] transition duration-300"
      />

      <div>
        <span class=`font-Dancing font-bold skew-y-[-21deg] pointer-events-none text-center absolute bottom-48 md:bottom-28 lg:bottom-48 left-0 right-0 z-50 mx-auto text-6xl lg:text-6xl ${colorText}`>
          {name}
        </span>

        <span class=`font-bold skew-y-[-10deg] pointer-events-none text-center absolute bottom-0 left-0 right-0 z-50 mx-auto`>
          <p class="text-blue-400/80 uppercase text-2xl" id="funnyText2"> 
            "{funnyText.at(0)}"
          </p>
        </span>
      </div>
    </a>

    <aside class="mt-10 flex gap-5 justify-center items-center mb-10 md:mb-0">
      <button id="button-left-change-text"> 
        <span class="text-3xl"> 
          <ArrowLeft class="size-12"/>
        </span>
      </button>
      <span id="text-counter" class="text-3xl">
      </span>
      <button id="button-change-text"> 
        <span class="text-3xl"> 
          <ArrowRight class="size-10"/>
        </span>
      </button>
    </aside>

    <InfoCharacterDesk name={name} birthDayText={birthDayText} isMobile={true} age={age} />

    <ReactionsComponent 
      isMobile={true}
      name={name} 
      reaction={reaction} 
      countLikes={countLikes}
      countStars={countStars}
      countHearts={countHearts}
      countDislikes={countDislikes}
      session={session}
    />

    <ShowGroupFriends id={id} groupForCharacter={groupForCharacter} isMobile={true} />

    <h2 class="mt-20 font-semibold text-2xl sm:text-3xl "> Galeria de Fotos de {name} </h2>
    <small class="text-slate-300/90 text-center"> Has click a cualquier imagen para su vista en grande </small>
    <section class="grid grid-cols-2 gap-5 sm:gap-8 md:gap-10 sm:grid-cols-3 p-5">
      {
        imagesGalery.map((imageObj, index) => (
          <picture class={`image-container ${imageObj.class}`} data-url={imageObj.image}>
              <img 
              decoding="async"
              loading="lazy"
              src={imageObj.image} 
              alt={`Imagen ${index + 1} de ${name}`}
              class={`size-full rounded-lg object-cover cursor-zoom-in`}
            />
          </picture>
        ))
      }
    </section>

    <section class="mt-10">
      <h3 class="uppercase text-3xl text-center font-bold mb-8"> Redes Sociales </h3>
      <div class="mx-auto flex max-w-[600px] flex-wrap justify-center gap-2 lg:max-w-full">
        {
          socials 
          ? socials?.map((social) => {
            const IconComponent = socialIcons[social.type]

            if (!IconComponent) return

            return (
              <Socials href={social.link}>
                <IconComponent class="size-10 sm:size-12"/>
              </Socials>
            )
          })
          : <p class="text-center text-gray-400/90"> No hay redes sociales disponibles </p>
        }
      </div>
    </section>

    <Comments sessionUser={session} userComment={name} />

    <ShowComments comments={allComments} />

    <Modal className="clip-dialog" id="close-dialog" isButton={true}>
      <img decoding="async" loading="lazy" src='' alt="" id="image-clip" class="rounded-lg size-full">
    </Modal>
  </main>
</Layout>

<style>
  .masked-image {
    mask-image: linear-gradient(black 50%, transparent);
  }

  @keyframes show {
    from {
      opacity: 0; scale: 10%;
    }
    to {
      opacity: 1; scale: 100%;
    }
  
  }

  .image-container {
    view-timeline-name: --reveal;

    animation-name: show;
    animation-fill-mode: both;

    animation-timeline: --reveal;
    animation-range: entry 25% cover 50%;
  }
</style>

<script>
  import { $, $$ } from '@/lib/dom-selector'
  import { showModal } from '@/const/showModal'
  import { toastAlert } from '@/function/alerts'
  import Swal from 'sweetalert2'
  import confetti from 'canvas-confetti'

  document.addEventListener('astro:page-load', async () => {

    const $gridImages = $$('.image-container') as NodeListOf<HTMLPictureElement>
    const $buttonsReactions = $$('.buttons-reactions') as NodeListOf<HTMLButtonElement>
    const $sessionImage = $('#session-image') as HTMLImageElement
    const $logout = $('#logout') as HTMLButtonElement
    const $login = $('#login') as HTMLButtonElement

    const { signIn, signOut } = await import('auth-astro/client')

    if ($login) $login.onclick = () => signIn("google")
    if ($logout) $logout.onclick = () => signOut()
    
    const changeText = () => {
      const $funnyText = $('#funnyText') as HTMLParagraphElement
      const $funnyText2 = $('#funnyText2') as HTMLParagraphElement
      const $buttonChangeText = $('#button-change-text') as HTMLButtonElement
      const $buttonLeftChangeText = $('#button-left-change-text') as HTMLButtonElement
      const $arrayToText = $('#arrayToText') as HTMLInputElement
      const $textCounter = $('#text-counter') as HTMLSpanElement
  
      if (!$funnyText || !$buttonChangeText || !$buttonLeftChangeText || !$arrayToText || !$textCounter) return
      
      let index = 0
      const arrayText = $arrayToText?.value.split('. ')
  
      $textCounter.textContent = `${index + 1}/${arrayText?.length}`
  
      $buttonLeftChangeText.addEventListener('click', () => {
        index = (index - 1 + arrayText.length) % arrayText.length
        $funnyText.textContent = `"${arrayText[index]}"`
        $funnyText2.textContent = `"${arrayText[index]}"`
        $textCounter.textContent = `${index + 1}/${arrayText.length}`
      })
  
      $buttonChangeText.addEventListener('click', () => {
        index = (index + 1) % arrayText.length
        $funnyText.textContent = `"${arrayText[index]}"`
        $funnyText2.textContent = `"${arrayText[index]}"`
        $textCounter.textContent = `${index + 1}/${arrayText.length}`
      })
    }

    /* const onScroll = () => {
      $gridImages.forEach(($image) => {
        const rect = $image.getBoundingClientRect()
        if (rect.top < window.innerHeight && rect.bottom >= 0) {
          $image.classList.add('animate-zoom-in')
          $image.classList.remove('animate-zoom-out')
        } else {
          $image.classList.remove('animate-zoom-in')
          $image.classList.add('animate-zoom-out')
        }
      })
    } */

    $buttonsReactions.forEach(($button) => {
      $button.addEventListener('click', async () => {
        const { reaction, session, name } = $button.dataset

        const userSession = JSON.parse(session)

        if (userSession == null) {
          $login.click()
          return
        }

        const dataToSend = {
          reaction,
          userReaction: name,
        }

        const response = await fetch('/api/rections/reactions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(dataToSend),
        })

        if (response.ok) {
          $buttonsReactions.forEach(($button) => {
            $button.classList.remove('text-blue-500')
            $button.classList.remove('shadow-lightblue')
            $button.classList.remove('text-yellow-400')
            $button.classList.remove('shadow-yellow')
            $button.classList.remove('text-red-500')
            $button.classList.remove('shadow-red')
            $button.classList.remove('text-purple-300')
            $button.classList.remove('shadow-purple')
          })
          $button.classList.add('text-blue-500')
          $button.classList.add('shadow-lightblue')

          $buttonsReactions.forEach(($button) => $button.disabled = true)
          toastAlert({ title: 'Reaccionado 游밼', type: 'success', icon: true, dismissible: false, location: 'bottom-center' })
        } else {
          console.log('Error al enviar la reacci칩n')
          toastAlert({ title: 'Error', type: 'error', icon: true, dismissible: false, location: 'bottom-center' })
        }
      })
    })

    const sendEmailForBirtDay = async () => {
      if (!$sessionImage) return

      const { birthday, name } = $sessionImage.dataset

      const today = new Date()
      const [day, month, year] = birthday.split('/')
      const birthDay = new Date(Number(year), Number(month) - 1, Number(day))

      if (today.getDate() === birthDay.getDate() && today.getMonth() === birthDay.getMonth()) {
        confetti({
          particleCount: 100,
          spread: 70,
          origin: { y: 0.6 },
          shapes: ['star', 'square', 'circle'],
        })

        if (!localStorage.getItem(`alertBirthDay-${name}`)) {
          Swal.fire({
            title: 'Feliz Cumplea침os!',
            html: `Hoy es el cumplea침os de <span class="text-red-400/90 font-bold">${name}</span>`,
            footer: `<span>Espero que <span class="text-blue-300/90">${name}</span> tenga un <span class="text-yellow-400/90 font-bold">d칤a incre칤ble</span></span>`,
            showCancelButton: true,
            allowOutsideClick: false,
            confirmButtonText: "Celebrar!",
            cancelButtonText: "Cerrar",
            showClass: {
              popup: 'animate-fade-in'
            },
            hideClass: {
              popup: 'animate-fade-out'
            },
            imageUrl: '/recursos/gif-birthday.gif',
            imageWidth: 200,
            imageAlt: 'Gif de Feliz Cumplea침os',
          }).then((result) => {
            if (result.isConfirmed) {
              confetti({
                particleCount: 300,
                spread: 70,
                origin: { y: 0.6 },
                shapes: ['star', 'square', 'circle'],
              })
              localStorage.setItem(`alertBirthDay-${name}`, 'true')
            }

            if (result.isDismissed) localStorage.setItem(`alertBirthDay-${name}`, 'true')
          })
        }
      }
    }

    //window.addEventListener('scroll', onScroll)
    sendEmailForBirtDay()
    //onScroll()
    changeText()
    showModal()
  })
</script>